using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;
using System.Reflection;
using Griffin.Data.Converters;

namespace Griffin.Data.Mappings
{
    /// <summary>
    /// A very simple entity mapper.
    /// </summary>
    /// <typeparam name="TEntity">Entity type (which will be generated by this mapping)</typeparam>
    /// <example>
    /// Either create and register a mapping manually:
    /// <code>
    /// <![CDATA[
    /// var yourMapper = new SimpleMapper<User>();
    /// yourMapper.Add(x => x.UserId, "user_id");
    /// 
    /// MapperProvider.Instance.Add(yourMapper);
    /// ]]>
    /// </code>
    /// 
    /// Or use assembly scanning:
    /// <code>
    /// <![CDATA[
    /// public class UserMapper : SimpleMapper<User>
    /// {
    ///     public UserMapper()
    ///     {
    ///         Add(x => x.UserId, "user_id");
    ///     }
    /// }
    /// 
    /// MapperProvider.Instance.RegisterAssembly(Assembly.GetExecutingAssembly());
    /// ]]>
    /// </code>
    /// </example>
    public class SimpleMapper<TEntity> : IDataRecordMapper<TEntity> where TEntity : class
    {
        private readonly IList<IColumnMapping> _mappings = new List<IColumnMapping>();

        /// <summary>
        /// Gets column mappings
        /// </summary>
        protected IEnumerable<IColumnMapping> Mappings { get { return _mappings; } }

        #region IDataRecordMapper<TEntity> Members

        /// <summary>
        /// Map a record to a new entity
        /// </summary>
        /// <param name="record">Row from the query result</param>
        /// <returns>Created and populated entity.</returns>
        public virtual TEntity Map(IDataRecord record)
        {
            if (record == null) throw new ArgumentNullException("record");

            var entity = (TEntity) Activator.CreateInstance(typeof (TEntity), true);
            foreach (var mapping in _mappings)
            {
                mapping.SetValue(record, entity);
            }
            return entity;
        }

        #endregion

        /// <summary>
        /// Add a custom mapping
        /// </summary>
        /// <param name="mapping">Mapping which is used.</param>
        public void Add(IColumnMapping mapping)
        {
            if (mapping == null) throw new ArgumentNullException("mapping");

            _mappings.Add(mapping);
        }

        /// <summary>
        /// Add a column mapping
        /// </summary>
        /// <param name="property">Property to map</param>
        /// <param name="columnName">Column in the table</param>
        /// <param name="converter">Converter (converts from the column type to the property type)</param>
        public void Add(Expression<Func<TEntity, object>> property, string columnName, IColumnConverter converter)
        {
            if (property == null) throw new ArgumentNullException("property");
            if (columnName == null) throw new ArgumentNullException("columnName");
            if (converter == null) throw new ArgumentNullException("converter");

            var mapping = new SimpleColumnMapping<TEntity>(property, columnName, converter);
            _mappings.Add(mapping);
        }

        /// <summary>
        /// Add a column mapping
        /// </summary>
        /// <param name="property">Property to map</param>
        /// <param name="columnName">Column name</param>
        /// <remarks>The column type and the property type must match.</remarks>
        public void Add(Expression<Func<TEntity, object>> property, string columnName)
        {
            if (property == null) throw new ArgumentNullException("property");
            if (columnName == null) throw new ArgumentNullException("columnName");

            var mapping = new SimpleColumnMapping<TEntity>(property, columnName, null);
            _mappings.Add(mapping);
        }
    }
}